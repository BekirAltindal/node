nodes = {
	udp_node = {					# The dictionary is indexed by the name of the node.
		type = "socket",			# For a list of available node-types run: 'villas-node -h'
		vectorize = 30,				# Receive and sent 30 samples per message (combining).
		samplelen = 10				# The maximum number of samples this node can receive

		builtin = false,			# By default, all nodes will have a few builtin hooks attached to them.
									# When collecting statistics or measurements these are undesired.

	### The following settings are specific to the socket node-type!! ###

		layer	= "udp",			# Layer can be one of:
							#   - udp     Send / receive L4 UDP packets
							#   - ip      Send / receive L3 IP packets
							#   - eth     Send / receive L2 Ethernet frames (IEEE802.3)

		format	= "gtnet.fake",			# For a list of available node-types run: 'villas-node -h'

		in = {
			address = "127.0.0.1:12001"	# This node only received messages on this IP:Port pair
			
			verify_source = true, 		# Check if source address of incoming packets matches the remote address.
			
			multicast = {			# IGMP multicast is only support for layer = (ip|udp)
				enabled	= true,

				group = "224.1.2.3",	# The multicast group. Must be within 224.0.0.0/4
				interface = "1.2.3.4",	# The IP address of the interface which should receive multicast packets.
				ttl = 128,		# The time to live for outgoing multicast packets.
				loop = false,		# Whether or not to loopback outgoing multicast packets to the local host.
			},

			hooks = (
				{
					type = "stats",
					
					warmup = 100,		# The first 100 samples are used to estimate bounds for the histograms
					format = "human",	# One of: human, json, matlab
					bucket = 30,		# The number of buckets for the histograms
					verbose = true		# Plot histograms during shutdown
				}
			)
		},
		out = {
			address = "127.0.0.1:12000",	# This node sents outgoing messages to this IP:Port pair
		
			netem = {			# Network emulation settings
				enabled = true,
							# Those settings can be specified for each node invidually!
				delay = 100000,		# Additional latency in microseconds
				jitter = 30000,		# Jitter in uS
				distribution = "normal", # Distribution of delay: uniform, normal, pareto, paretonormal
				loss = 10		# Packet loss in percent
				duplicate = 10,		# Duplication in percent
				corrupt = 10		# Corruption in percent
			}
		}
	}
}
