
nodes = {
	goose = {
		type = "iec61850-goose"

		in = {
			# ethernet interface to listen on
			interface = "lo"

			# use the goose timestamp for a sample
			with_timestamp = true

			# list of named subscriber definitions
			subscribers = {
				relay = {
					# mandatory GoCbRef
					go_cb_ref = "AA1J1Q01A3LD0/LLN0$GO$gcbdata"

					# optional filter by packet destination MAC address
					# dst_address = "01:0c:cd:01:00:00"

					# optional filter by AppID
					# app_id = 0

					# optional trigger specification (either "always" or "change")
					#
					# "always" = emit an updated sample for each incoming GOOSE message
					# "change" = only emit an updated sample when SqNum is 0
					trigger = "change"
				}
			}

			# mapping from goose events to signals
			signals = (
				{
					name = "ABB_relay_state"
					type = "boolean"
					# mandatory MmsType specification
					mms_type = "boolean"
					# mandatory subscriber name
					subscriber = "relay"
					# mandatory index within the received vector of GOOSE values
					index = 0
				},
				{
					name = "ABB_relay_state_meta_bitset"
					type = "integer"
					mms_type = "bit-string"
					subscriber = "relay"
					index = 1
				}
			)
		}
	}
}

paths = (
	{
		in = "goose"
		hooks = (
			{
				type = "print"
			}
		)
	}
)
