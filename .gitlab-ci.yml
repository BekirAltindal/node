variables:
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  PREFIX: /usr/
  CRITERION_OPTS: --ignore-warnings
  DISTRO: fedora # standard distro
  DOCKER_FILE: packaging/docker/Dockerfile.${DISTRO}
  DOCKER_TAG: ${CI_COMMIT_REF_NAME}
  DOCKER_IMAGE: registry.git.rwth-aachen.de/acs/public/villas/node
  DOCKER_IMAGE_DEV: ${DOCKER_IMAGE}/dev-${DISTRO}
  DOCKER_CLI_EXPERIMENTAL: enabled
  DOCKER_PLATFORMS: amd64 armv7 arm64
  MAKE_OPTS: "-j16"
  RELEASEVER: "33"

stages:
- prepare
- build
- test
- packaging
- deploy
- deploy2

# Stage: prepare
##############################################################################

# Build docker image which is used to build & test VILLASnode
.prepare:docker-dev: &prepare_docker_dev
  stage: prepare
  image: docker:19.03
  script:
  - docker build ${DOCKER_OPTS}
      --file ${DOCKER_FILE}
      --tag ${DOCKER_IMAGE_DEV}:${DOCKER_TAG}
      --target dev .
  tags:
  - docker

prepare:fedora:x86_64:
  <<: *prepare_docker_dev
  variables:
    DISTRO: fedora
    DOCKER_OPTS: --tag ${DOCKER_IMAGE}/dev:${CI_COMMIT_REF_NAME}

prepare:fedora-minimal:x86_64:
  <<: *prepare_docker_dev
  variables:
    DISTRO: fedora
    DOCKER_FILE: packaging/docker/Dockerfile.fedora-minimal
    DOCKER_IMAGE_DEV: ${DOCKER_IMAGE}/dev-fedora-minimal

prepare:ubuntu:x86_64:
  <<: *prepare_docker_dev
  variables:
    DISTRO: ubuntu

prepare:centos:x86_64:
  <<: *prepare_docker_dev
  variables:
    DISTRO: centos

prepare:alpine:x86_64:
  <<: *prepare_docker_dev
  variables:
    DISTRO: alpine

prepare:debian-multiarch:armhf:
  <<: *prepare_docker_dev
  variables:
    DISTRO: debian
    DOCKER_FILE: packaging/docker/Dockerfile.debian-multiarch
    DOCKER_IMAGE_DEV: ${DOCKER_IMAGE}/dev-debian-armhf
    DOCKER_OPTS: --build-arg ARCH=armhf
                 --build-arg TRIPLET=arm-linux-gnueabihf

prepare:debian-multiarch:arm64:
  <<: *prepare_docker_dev
  variables:
    DISTRO: debian
    DOCKER_FILE: packaging/docker/Dockerfile.debian-multiarch
    DOCKER_IMAGE_DEV: ${DOCKER_IMAGE}/dev-debian-arm64
    DOCKER_OPTS: --build-arg ARCH=arm64
                 --build-arg TRIPLET=aarch64-linux-gnu

# Stage: build
##############################################################################

.build: &build
  stage: build
  script:
  - mkdir -p build && cd build
  - cmake ${CMAKE_OPTS} ..
  - make ${MAKE_OPTS}
  artifacts:
    expire_in: 1 week
    paths:
    - build/
  image: ${DOCKER_IMAGE_DEV}:${DOCKER_TAG}
  tags:
  - docker

build:fedora:x86_64:
  <<: *build
  variables:
    DISTRO: fedora
  needs:
  - job: prepare:fedora:x86_64

build:fedora-minimal:x86_64:
  <<: *build
  variables:
    DISTRO: fedora-minimal
    CMAKE_OPTS: -DWITH_GRAPHVIZ=OFF
                -DWITH_HOOKS=OFF
                -DWITH_WEB=OFF
                -DWITH_API=OFF
                -DWITH_CONFIG=OFF
                -DWITH_SRC=OFF
                -DWITH_TOOLS=OFF
                -DWITH_TESTS=OFF
                -DWITH_PLUGINS=OFF
                -DWITH_CLIENTS=OFF
                -DWITH_DOC=OFF
                -DWITH_FPGA=OFF
  needs:
  - job: prepare:fedora-minimal:x86_64

build:fedora-minimal-default:x86_64:
  <<: *build
  variables:
    DISTRO: fedora-minimal
  needs:
  - job: prepare:fedora-minimal:x86_64

build:ubuntu:x86_64:
  <<: *build
  variables:
    DISTRO: ubuntu
    CMAKE_OPTS: -DCMAKE_MODULE_PATH=/usr/local/lib64/cmake -DCMAKE_PREFIX_PATH=/usr/local
  needs:
  - job: prepare:ubuntu:x86_64

build:centos:x86_64:
  <<: *build
  script:
  - mkdir -p build && cd build
  - cmake3 ${CMAKE_OPTS} ..
  - make ${MAKE_OPTS}
  variables:
    DISTRO: centos
    CMAKE_OPTS: -DCMAKE_MODULE_PATH=/usr/local/lib64/cmake -DCMAKE_PREFIX_PATH=/usr/local
  needs:
  - job: prepare:centos:x86_64

build:alpine:x86_64:
  <<: *build
  variables:
    DISTRO: alpine
    CMAKE_OPTS: -DCMAKE_INSTALL_PREFIX=/app -DCMAKE_PREFIX_PATH=/app -DWITH_FPGA=OFF
  needs:
  - job: prepare:alpine:x86_64

build:debian-multiarch:armhf:
  <<: *build
  variables:
    DISTRO: debian-armhf
  needs:
  - job: prepare:debian-multiarch:armhf

build:debian-multiarch:arm64:
  <<: *build
  variables:
    DISTRO: debian-arm64
  needs:
  - job: prepare:debian-multiarch:arm64

build:docs:
  stage: build
  artifacts:
    name: ${CI_PROJECT_NAME}-doc-${CI_BUILD_REF}
    paths:
    - build/doc/
  script:
  - mkdir -p build && cd build
  - cmake ${CMAKE_OPTS} ..
  - make ${MAKE_OPTS} doc
  image: ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  tags:
  - docker
  needs:
  - job: prepare:fedora:x86_64


# Stage: test
##############################################################################

test:flake8:
  stage: test
  script:
  - flake8 python/
  image: ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  tags:
  - docker

test:cppcheck:
  stage: test
  script:
  - cppcheck -j $(nproc)
             --max-configs=32
             --error-exitcode=1
             --quiet
             --inline-suppr
             --enable=warning,performance,portability,information,missingInclude
             --std=c++11
             --suppress=noValidConfiguration
             -I include
             -I common/include
             src/ lib/ tests/unit/ | tee cppcheck.log
  image: ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  needs:
  - job: build:fedora:x86_64
  tags:
  - docker
  artifacts:
    when: on_failure
    paths:
      - cppcheck.log
    expose_as: cppcheck

test:unit:
  stage: test
  needs:
  - job: build:fedora:x86_64
  variables:
    LD_PRELOAD: /usr/lib64/libSegFault.so
    SEGFAULT_SIGNALS: all
    SEGFAULT_SIGNALS: bus abrt
  script:
  - mkdir -p build && cd build
  - cmake ${CMAKE_OPTS} ..
  - make ${MAKE_OPTS} run-unit-tests
  image: ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  tags:
  - docker

test:integration:
  stage: test
  allow_failure: true
  needs:
  - job: build:fedora:x86_64
  script:
  - mkdir -p build && cd build
  - cmake ${CMAKE_OPTS} ..
  - make ${MAKE_OPTS} run-integration-tests
  artifacts:
    name: ${CI_PROJECT_NAME}-integration-tests-${CI_BUILD_REF}
    when: always
    paths:
    - build/tests/integration/
  image: ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  tags:
  - docker

# Stage: packaging
##############################################################################

packaging:rpm:
  stage: packaging
  image: ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  needs:
  - job: build:fedora:x86_64
  script:
  - mkdir -p build && cd build
  - cmake -DWITH_NODE_ETHERCAT=OFF ..
  - make ${MAKE_OPTS} doc
  - make ${MAKE_OPTS} package
  artifacts:
    expire_in: 1 week
    name: ${CI_PROJECT_NAME}-packages-${CI_BUILD_REF}
    paths:
    - build/*.tar.gz
    - build/*.rpm
  tags:
  - docker

.packaging:docker: &packaging_docker
  stage: packaging
  image: docker:19.03
  before_script:
  - mkdir -p ~/.docker/cli-plugins/
  - wget -O ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64
  - chmod a+x ~/.docker/cli-plugins/docker-buildx
  - docker buildx create --use --name cross-platform-build
  - docker buildx inspect --bootstrap cross-platform-build
  script:
  - docker buildx build
      --target app
      --platform ${PLATFORM}
      --file packaging/docker/Dockerfile.alpine
      --tag ${DOCKER_IMAGE}:${DOCKER_TAG} .
  tags:
  - docker
  needs: []

packaging:docker:amd64:
  <<: *packaging_docker
  variables:
    PLATFORM: linux/amd64
    DOCKER_TAG: ${CI_COMMIT_REF_NAME}-amd64

packaging:docker:arm64:
  <<: *packaging_docker
  variables:
    PLATFORM: linux/arm64
    DOCKER_TAG: ${CI_COMMIT_REF_NAME}-arm64

packaging:docker:armv7:
  <<: *packaging_docker
  variables:
    PLATFORM: linux/arm/v7
    DOCKER_TAG: ${CI_COMMIT_REF_NAME}-armv7

# Stage: deploy
##############################################################################

deploy:web:
  stage: deploy
  image:
    name: rclone/rclone:1.50
    entrypoint: [""]
  before_script:
  - rclone config create fein webdav url ${DEPLOY_PATH} vendor other user ${DEPLOY_USER} pass ${DEPLOY_PASS}
  script:
  - rclone copy build/doc/html fein:villas/doc-dev/${CI_BUILD_REF_NAME}
  needs:
  - job: build:docs
  only:
  - "/^v\\d+(\\.\\d+)+$/" # Only on version tags
  tags:
  - docker

.deploy:packages: &deploy_packages
  stage: deploy
  image:
    name: rclone/rclone:1.50
    entrypoint: [""]
  before_script:
  - apk add curl
  - rclone config create fein webdav url ${DEPLOY_PATH} vendor other user ${DEPLOY_USER} pass ${DEPLOY_PASS}
  script:
  - rclone copy --max-depth 1 --include '*.tar.gz' build fein:packages/dist
  - rclone copy --max-depth 1 --include '*.rpm'    build fein:packages/fedora/${RELEASEVER}/x86_64
  - curl -L --user ${DEPLOY_USER}:${DEPLOY_PASS} ${DEPLOY_PATH}/hooks/createrepo
  needs:
  - job: packaging:rpm
  tags:
  - docker

deploy:packages:manual:
  <<: *deploy_packages
  when: manual
  except:
  - "/^v\\d+(\\.\\d+)+$/" # Only on version tags

deploy:packages:tags:
  <<: *deploy_packages
  only:
  - "/^v\\d+(\\.\\d+)+$/" # Only on version tags

deploy:docker:
  stage: deploy
  image: docker:19.03
  variables:
    DOCKER_CLI_EXPERIMENTAL: enabled
  before_script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  needs:
  - packaging:docker:amd64
  - packaging:docker:armv7
  - packaging:docker:arm64
  script:
  - docker push ${DOCKER_IMAGE}/dev:${DOCKER_TAG}
  - for PF in ${DOCKER_PLATFORMS}; do
      docker push ${DOCKER_IMAGE}:${DOCKER_TAG}-${PF};
    done
  - docker manifest create ${DOCKER_IMAGE}:${DOCKER_TAG}
                           ${DOCKER_IMAGE}:${DOCKER_TAG}-amd64
                           ${DOCKER_IMAGE}:${DOCKER_TAG}-arm64
                           ${DOCKER_IMAGE}:${DOCKER_TAG}-armv7
  - docker manifest push ${DOCKER_IMAGE}:${DOCKER_TAG}
  tags:
  - docker


# Stage: deploy2
##############################################################################

.deploy:docker:latest: &deploy_docker_latest
  stage: deploy2
  image: docker:19.03
  before_script:
  - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  needs:
  - deploy:docker
  script:
  - docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
  - docker push ${DOCKER_IMAGE}:latest
  - docker tag ${DOCKER_IMAGE}/dev:${DOCKER_TAG} ${DOCKER_IMAGE}/dev:latest
  - docker push ${DOCKER_IMAGE}/dev:latest
  tags:
  - docker

deploy:docker:manual:
  <<: *deploy_docker_latest
  when: manual
  except:
  - "/^v\\d+(\\.\\d+)+$/" # Only on version tags

deploy:docker:tags:
  <<: *deploy_docker_latest
  only:
  - "/^v\\d+(\\.\\d+)+$/" # Only on version tags
